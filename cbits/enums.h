#include <linux/if.h>
#include <linux/if_tun.h>
#include <linux/if_arp.h>
#include <linux/if_link.h>
#include <linux/netlink.h>
#include <linux/rtnetlink.h>
#include <sys/socket.h>

enum LinkFlags {
  Iff8021qVlan = IFF_802_1Q_VLAN,
  IffAllmulti = IFF_ALLMULTI,
  IffAutomedia = IFF_AUTOMEDIA,
  IffBonding = IFF_BONDING,
  IffBroadcast = IFF_BROADCAST,
  IffDebug = IFF_DEBUG,
  IffDormant = IFF_DORMANT,
  IffDynamic = IFF_DYNAMIC,
  IffEbridge = IFF_EBRIDGE,
  IffEcho = IFF_ECHO,
  IffIsatap = IFF_ISATAP,
  IffLoopback = IFF_LOOPBACK,
  IffLowerUp = IFF_LOWER_UP,
  IffMaster = IFF_MASTER,
  IffMaster8023ad = IFF_MASTER_8023AD,
  IffMasterAlb = IFF_MASTER_ALB,
  IffMasterArpmon = IFF_MASTER_ARPMON,
  IffMulticast = IFF_MULTICAST,
  IffNoarp = IFF_NOARP,
  IffNotrailers = IFF_NOTRAILERS,
  IffNoPi = IFF_NO_PI,
  IffOneQueue = IFF_ONE_QUEUE,
  IffPointopoint = IFF_POINTOPOINT,
  IffPortsel = IFF_PORTSEL,
  IffPromisc = IFF_PROMISC,
  IffRunning = IFF_RUNNING,
  IffSlave = IFF_SLAVE,
  IffSlaveInactive = IFF_SLAVE_INACTIVE,
  IffSlaveNeedarp = IFF_SLAVE_NEEDARP,
  IffTap = IFF_TAP,
  IffTun = IFF_TUN,
  IffTunExcl = IFF_TUN_EXCL,
  IffUp = IFF_UP,
  IffVnetHdr = IFF_VNET_HDR,
  IffWanHdlc = IFF_WAN_HDLC,
  IffXmitDstRelease = IFF_XMIT_DST_RELEASE,
};

enum LinkType {
  ArphrdAdapt = ARPHRD_ADAPT,
  ArphrdAppletlk = ARPHRD_APPLETLK,
  ArphrdArcnet = ARPHRD_ARCNET,
  ArphrdAsh = ARPHRD_ASH,
  ArphrdAtm = ARPHRD_ATM,
  ArphrdAx25 = ARPHRD_AX25,
  ArphrdBif = ARPHRD_BIF,
  ArphrdCan = ARPHRD_CAN,
  ArphrdChaos = ARPHRD_CHAOS,
  ArphrdCisco = ARPHRD_CISCO,
  ArphrdCslip = ARPHRD_CSLIP,
  ArphrdCslip6 = ARPHRD_CSLIP6,
  ArphrdDdcmp = ARPHRD_DDCMP,
  ArphrdDlci = ARPHRD_DLCI,
  ArphrdEconet = ARPHRD_ECONET,
  ArphrdEether = ARPHRD_EETHER,
  ArphrdEther = ARPHRD_ETHER,
  ArphrdEui64 = ARPHRD_EUI64,
  ArphrdFcal = ARPHRD_FCAL,
  ArphrdFcfabric = ARPHRD_FCFABRIC,
  ArphrdFcpl = ARPHRD_FCPL,
  ArphrdFcpp = ARPHRD_FCPP,
  ArphrdFddi = ARPHRD_FDDI,
  ArphrdFrad = ARPHRD_FRAD,
  ArphrdHdlc = ARPHRD_HDLC,
  ArphrdHippi = ARPHRD_HIPPI,
  ArphrdHwx25 = ARPHRD_HWX25,
  ArphrdIeee1394 = ARPHRD_IEEE1394,
  ArphrdIeee802 = ARPHRD_IEEE802,
  ArphrdIeee80211 = ARPHRD_IEEE80211,
  ArphrdIeee80211Prism = ARPHRD_IEEE80211_PRISM,
  ArphrdIeee80211Radiotap = ARPHRD_IEEE80211_RADIOTAP,
  ArphrdIeee802154 = ARPHRD_IEEE802154,
  ArphrdIeee802Tr = ARPHRD_IEEE802_TR,
  ArphrdInfiniband = ARPHRD_INFINIBAND,
  ArphrdIpddp = ARPHRD_IPDDP,
  ArphrdIpgre = ARPHRD_IPGRE,
  ArphrdIrda = ARPHRD_IRDA,
  ArphrdLapb = ARPHRD_LAPB,
  ArphrdLocaltlk = ARPHRD_LOCALTLK,
  ArphrdLoopback = ARPHRD_LOOPBACK,
  ArphrdMetricom = ARPHRD_METRICOM,
  ArphrdNetrom = ARPHRD_NETROM,
  ArphrdNone = ARPHRD_NONE,
  ArphrdPhonet = ARPHRD_PHONET,
  ArphrdPhonetPipe = ARPHRD_PHONET_PIPE,
  ArphrdPimreg = ARPHRD_PIMREG,
  ArphrdPpp = ARPHRD_PPP,
  ArphrdPronet = ARPHRD_PRONET,
  ArphrdRawhdlc = ARPHRD_RAWHDLC,
  ArphrdRose = ARPHRD_ROSE,
  ArphrdRsrvd = ARPHRD_RSRVD,
  ArphrdSit = ARPHRD_SIT,
  ArphrdSkip = ARPHRD_SKIP,
  ArphrdSlip = ARPHRD_SLIP,
  ArphrdSlip6 = ARPHRD_SLIP6,
  ArphrdTunnel = ARPHRD_TUNNEL,
  ArphrdTunnel6 = ARPHRD_TUNNEL6,
  ArphrdVoid = ARPHRD_VOID,
  ArphrdX25 = ARPHRD_X25,
};

enum MessageFlags {
  NlmFAck = NLM_F_ACK,
  NlmFAppend = NLM_F_APPEND,
  NlmFAtomic = NLM_F_ATOMIC,
  NlmFCreate = NLM_F_CREATE,
  NlmFEcho = NLM_F_ECHO,
  NlmFExcl = NLM_F_EXCL,
  NlmFMatch = NLM_F_MATCH,
  NlmFMulti = NLM_F_MULTI,
  NlmFReplace = NLM_F_REPLACE,
  NlmFRequest = NLM_F_REQUEST,
  NlmFRoot = NLM_F_ROOT,
};

enum MessageType {
  NlmsgDone = NLMSG_DONE,
  NlmsgError = NLMSG_ERROR,
  NlmsgNoop = NLMSG_NOOP,
  NlmsgOverrun = NLMSG_OVERRUN,
  RtmDelaction = RTM_DELACTION,
  RtmDeladdr = RTM_DELADDR,
  RtmDeladdrlabel = RTM_DELADDRLABEL,
  RtmDellink = RTM_DELLINK,
  RtmDelneigh = RTM_DELNEIGH,
  RtmDelqdisc = RTM_DELQDISC,
  RtmDelroute = RTM_DELROUTE,
  RtmDelrule = RTM_DELRULE,
  RtmDeltclass = RTM_DELTCLASS,
  RtmDeltfilter = RTM_DELTFILTER,
  RtmGetaction = RTM_GETACTION,
  RtmGetaddr = RTM_GETADDR,
  RtmGetaddrlabel = RTM_GETADDRLABEL,
  RtmGetanycast = RTM_GETANYCAST,
  RtmGetdcb = RTM_GETDCB,
  RtmGetlink = RTM_GETLINK,
  RtmGetmulticast = RTM_GETMULTICAST,
  RtmGetneigh = RTM_GETNEIGH,
  RtmGetneightbl = RTM_GETNEIGHTBL,
  RtmGetqdisc = RTM_GETQDISC,
  RtmGetroute = RTM_GETROUTE,
  RtmGetrule = RTM_GETRULE,
  RtmGettclass = RTM_GETTCLASS,
  RtmGettfilter = RTM_GETTFILTER,
  RtmNewaction = RTM_NEWACTION,
  RtmNewaddr = RTM_NEWADDR,
  RtmNewaddrlabel = RTM_NEWADDRLABEL,
  RtmNewlink = RTM_NEWLINK,
  RtmNewnduseropt = RTM_NEWNDUSEROPT,
  RtmNewneigh = RTM_NEWNEIGH,
  RtmNewneightbl = RTM_NEWNEIGHTBL,
  RtmNewprefix = RTM_NEWPREFIX,
  RtmNewqdisc = RTM_NEWQDISC,
  RtmNewroute = RTM_NEWROUTE,
  RtmNewrule = RTM_NEWRULE,
  RtmNewtclass = RTM_NEWTCLASS,
  RtmNewtfilter = RTM_NEWTFILTER,
  RtmSetdcb = RTM_SETDCB,
  RtmSetlink = RTM_SETLINK,
  RtmSetneightbl = RTM_SETNEIGHTBL,
};

enum AddressFamily {
  AfAppletalk = AF_APPLETALK,
  AfAsh = AF_ASH,
  AfAtmpvc = AF_ATMPVC,
  AfAtmsvc = AF_ATMSVC,
  AfAx25 = AF_AX25,
  AfBluetooth = AF_BLUETOOTH,
  AfBridge = AF_BRIDGE,
  AfCan = AF_CAN,
  AfDecnet = AF_DECnet,
  AfEconet = AF_ECONET,
  AfFile = AF_FILE,
  AfIeee802154 = AF_IEEE802154,
  AfInet = AF_INET,
  AfInet6 = AF_INET6,
  AfIpx = AF_IPX,
  AfIrda = AF_IRDA,
  AfIsdn = AF_ISDN,
  AfIucv = AF_IUCV,
  AfKey = AF_KEY,
  AfLlc = AF_LLC,
  AfLocal = AF_LOCAL,
  AfMax = AF_MAX,
  AfNetbeui = AF_NETBEUI,
  AfNetlink = AF_NETLINK,
  AfNetrom = AF_NETROM,
  AfPacket = AF_PACKET,
  AfPhonet = AF_PHONET,
  AfPppox = AF_PPPOX,
  AfRds = AF_RDS,
  AfRose = AF_ROSE,
  AfRoute = AF_ROUTE,
  AfRxrpc = AF_RXRPC,
  AfSecurity = AF_SECURITY,
  AfSna = AF_SNA,
  AfTipc = AF_TIPC,
  AfUnix = AF_UNIX,
  AfUnspec = AF_UNSPEC,
  AfWanpipe = AF_WANPIPE,
  AfX25 = AF_X25,
};

enum LinkAttrType {
  IflaCost = IFLA_COST,
  IflaLinkinfo = IFLA_LINKINFO,
  IflaMap = IFLA_MAP,
  IflaMaster = IFLA_MASTER,
  IflaPriority = IFLA_PRIORITY,
  IflaProtinfo = IFLA_PROTINFO,
  IflaTxqlen = IFLA_TXQLEN,
  IflaWeight = IFLA_WEIGHT,
  IflaWireless = IFLA_WIRELESS,
};

enum AddrFlags {
  IfaFDadfailed = IFA_F_DADFAILED,
  IfaFDeprecated = IFA_F_DEPRECATED,
  IfaFHomeaddress = IFA_F_HOMEADDRESS,
  IfaFNodad = IFA_F_NODAD,
  IfaFOptimistic = IFA_F_OPTIMISTIC,
  IfaFPermanent = IFA_F_PERMANENT,
  IfaFSecondary = IFA_F_SECONDARY,
  IfaFTemporary = IFA_F_TEMPORARY,
  IfaFTentative = IFA_F_TENTATIVE,
};

enum RouteProto {
  RtprotBird = RTPROT_BIRD,
  RtprotBoot = RTPROT_BOOT,
  RtprotDhcp = RTPROT_DHCP,
  RtprotDnrouted = RTPROT_DNROUTED,
  RtprotGated = RTPROT_GATED,
  RtprotKernel = RTPROT_KERNEL,
  RtprotMrt = RTPROT_MRT,
  RtprotNtk = RTPROT_NTK,
  RtprotRa = RTPROT_RA,
  RtprotRedirect = RTPROT_REDIRECT,
  RtprotStatic = RTPROT_STATIC,
  RtprotUnspec = RTPROT_UNSPEC,
  RtprotXorp = RTPROT_XORP,
  RtprotZebra = RTPROT_ZEBRA,
};

enum RouteFlags {
  RtmFCloned = RTM_F_CLONED,
  RtmFEqualize = RTM_F_EQUALIZE,
  RtmFNotify = RTM_F_NOTIFY,
  RtmFPrefix = RTM_F_PREFIX,
};
